import { ElementRef, OnInit, EventEmitter, ChangeDetectorRef } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';
import * as ɵngcc2 from 'primeng/inputtext';
import * as ɵngcc3 from 'primeng/button';
export declare const INPUTNUMBER_VALUE_ACCESSOR: any;
export declare class InputNumber implements OnInit, ControlValueAccessor {
    el: ElementRef;
    private cd;
    showButtons: boolean;
    format: boolean;
    buttonLayout: string;
    prefix: string;
    locale: string;
    suffix: string;
    localeMatcher: string;
    currency: string;
    currencyDisplay: string;
    useGrouping: boolean;
    disabled: boolean;
    inputId: string;
    styleClass: string;
    style: any;
    placeholder: string;
    size: number;
    maxlength: number;
    tabindex: string;
    title: string;
    ariaLabel: string;
    ariaRequired: boolean;
    name: string;
    required: boolean;
    autocomplete: string;
    min: number;
    max: number;
    minFractionDigits: number;
    maxFractionDigits: number;
    incrementButtonClass: string;
    decrementButtonClass: string;
    incrementButtonIcon: string;
    decrementButtonIcon: string;
    mode: string;
    step: number;
    inputStyle: any;
    inputStyleClass: string;
    input: ElementRef;
    onFocus: EventEmitter<any>;
    onBlur: EventEmitter<any>;
    value: number;
    onModelChange: Function;
    onModelTouched: Function;
    focused: boolean;
    isSpecialChar: boolean;
    timer: any;
    lastValue: string;
    _numeral: any;
    numberFormat: any;
    _decimal: any;
    _group: any;
    _minusSign: any;
    _currency: any;
    _prefix: any;
    _suffix: any;
    _index: any;
    constructor(el: ElementRef, cd: ChangeDetectorRef);
    ngOnInit(): void;
    formatValue(value: any): any;
    formattedValue(): any;
    onInput(event: any): void;
    onInputKeyDown(event: any): void;
    onInputKeyPress(event: any): void;
    onPaste(event: any): void;
    onInputClick(): void;
    onInputFocus(event: any): void;
    onInputBlur(event: any): void;
    onUpButtonMouseDown(event: any): void;
    onUpButtonMouseUp(): void;
    onUpButtonMouseLeave(): void;
    onUpButtonKeyDown(event: any): void;
    onUpButtonKeyUp(): void;
    onDownButtonMouseDown(event: any): void;
    onDownButtonMouseUp(): void;
    onDownButtonMouseLeave(): void;
    onDownButtonKeyUp(): void;
    onDownButtonKeyDown(event: any): void;
    spin(event: any, dir: any): void;
    repeat(event: any, interval: any, dir: any): void;
    clearTimer(): void;
    insert(event: any, text: any): void;
    insertText(value: any, text: any, start: any, end: any): any;
    initCursor(): void;
    updateInput(value: any, operation: any): void;
    updateModel(event: any, value: any): void;
    updateValue(event: any, valueStr: any, operation: any): void;
    validateValue(value: any): any;
    deleteRange(value: any, start: any, end: any): any;
    isNumeralChar(char: any): boolean;
    isMinusSign(char: any): boolean;
    parseValue(text: any): number;
    writeValue(value: any): void;
    registerOnChange(fn: Function): void;
    registerOnTouched(fn: Function): void;
    setDisabledState(val: boolean): void;
    getOptions(): {
        localeMatcher: string;
        style: string;
        currency: string;
        currencyDisplay: string;
        useGrouping: boolean;
        minimumFractionDigits: number;
        maximumFractionDigits: number;
    };
    getDecimalExpression(): RegExp;
    getGroupingExpression(): RegExp;
    getMinusSignExpression(): RegExp;
    getCurrencyExpression(): RegExp;
    get filled(): boolean;
    resetRegex(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<InputNumber, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<InputNumber, "p-inputNumber", never, { "showButtons": "showButtons"; "format": "format"; "buttonLayout": "buttonLayout"; "useGrouping": "useGrouping"; "incrementButtonIcon": "incrementButtonIcon"; "decrementButtonIcon": "decrementButtonIcon"; "mode": "mode"; "step": "step"; "disabled": "disabled"; "prefix": "prefix"; "locale": "locale"; "suffix": "suffix"; "localeMatcher": "localeMatcher"; "currency": "currency"; "currencyDisplay": "currencyDisplay"; "inputId": "inputId"; "styleClass": "styleClass"; "style": "style"; "placeholder": "placeholder"; "size": "size"; "maxlength": "maxlength"; "tabindex": "tabindex"; "title": "title"; "ariaLabel": "ariaLabel"; "ariaRequired": "ariaRequired"; "name": "name"; "required": "required"; "autocomplete": "autocomplete"; "min": "min"; "max": "max"; "minFractionDigits": "minFractionDigits"; "maxFractionDigits": "maxFractionDigits"; "incrementButtonClass": "incrementButtonClass"; "decrementButtonClass": "decrementButtonClass"; "inputStyle": "inputStyle"; "inputStyleClass": "inputStyleClass"; }, { "onFocus": "onFocus"; "onBlur": "onBlur"; }, never, never>;
}
export declare class InputNumberModule {
    static ɵmod: ɵngcc0.ɵɵNgModuleDefWithMeta<InputNumberModule, [typeof InputNumber], [typeof ɵngcc1.CommonModule, typeof ɵngcc2.InputTextModule, typeof ɵngcc3.ButtonModule], [typeof InputNumber]>;
    static ɵinj: ɵngcc0.ɵɵInjectorDef<InputNumberModule>;
}

//# sourceMappingURL=inputnumber.d.ts.map