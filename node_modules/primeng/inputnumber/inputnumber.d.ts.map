{"version":3,"file":"inputnumber.d.ts","sources":["inputnumber.d.ts"],"names":[],"mappingssourcesContent":["import { ElementRef, OnInit, EventEmitter, ChangeDetectorRef } from '@angular/core';\nimport { ControlValueAccessor } from '@angular/forms';\nexport declare const INPUTNUMBER_VALUE_ACCESSOR: any;\nexport declare class InputNumber implements OnInit, ControlValueAccessor {\n    el: ElementRef;\n    private cd;\n    showButtons: boolean;\n    format: boolean;\n    buttonLayout: string;\n    prefix: string;\n    locale: string;\n    suffix: string;\n    localeMatcher: string;\n    currency: string;\n    currencyDisplay: string;\n    useGrouping: boolean;\n    disabled: boolean;\n    inputId: string;\n    styleClass: string;\n    style: any;\n    placeholder: string;\n    size: number;\n    maxlength: number;\n    tabindex: string;\n    title: string;\n    ariaLabel: string;\n    ariaRequired: boolean;\n    name: string;\n    required: boolean;\n    autocomplete: string;\n    min: number;\n    max: number;\n    minFractionDigits: number;\n    maxFractionDigits: number;\n    incrementButtonClass: string;\n    decrementButtonClass: string;\n    incrementButtonIcon: string;\n    decrementButtonIcon: string;\n    mode: string;\n    step: number;\n    inputStyle: any;\n    inputStyleClass: string;\n    input: ElementRef;\n    onFocus: EventEmitter<any>;\n    onBlur: EventEmitter<any>;\n    value: number;\n    onModelChange: Function;\n    onModelTouched: Function;\n    focused: boolean;\n    isSpecialChar: boolean;\n    timer: any;\n    lastValue: string;\n    _numeral: any;\n    numberFormat: any;\n    _decimal: any;\n    _group: any;\n    _minusSign: any;\n    _currency: any;\n    _prefix: any;\n    _suffix: any;\n    _index: any;\n    constructor(el: ElementRef, cd: ChangeDetectorRef);\n    ngOnInit(): void;\n    formatValue(value: any): any;\n    formattedValue(): any;\n    onInput(event: any): void;\n    onInputKeyDown(event: any): void;\n    onInputKeyPress(event: any): void;\n    onPaste(event: any): void;\n    onInputClick(): void;\n    onInputFocus(event: any): void;\n    onInputBlur(event: any): void;\n    onUpButtonMouseDown(event: any): void;\n    onUpButtonMouseUp(): void;\n    onUpButtonMouseLeave(): void;\n    onUpButtonKeyDown(event: any): void;\n    onUpButtonKeyUp(): void;\n    onDownButtonMouseDown(event: any): void;\n    onDownButtonMouseUp(): void;\n    onDownButtonMouseLeave(): void;\n    onDownButtonKeyUp(): void;\n    onDownButtonKeyDown(event: any): void;\n    spin(event: any, dir: any): void;\n    repeat(event: any, interval: any, dir: any): void;\n    clearTimer(): void;\n    insert(event: any, text: any): void;\n    insertText(value: any, text: any, start: any, end: any): any;\n    initCursor(): void;\n    updateInput(value: any, operation: any): void;\n    updateModel(event: any, value: any): void;\n    updateValue(event: any, valueStr: any, operation: any): void;\n    validateValue(value: any): any;\n    deleteRange(value: any, start: any, end: any): any;\n    isNumeralChar(char: any): boolean;\n    isMinusSign(char: any): boolean;\n    parseValue(text: any): number;\n    writeValue(value: any): void;\n    registerOnChange(fn: Function): void;\n    registerOnTouched(fn: Function): void;\n    setDisabledState(val: boolean): void;\n    getOptions(): {\n        localeMatcher: string;\n        style: string;\n        currency: string;\n        currencyDisplay: string;\n        useGrouping: boolean;\n        minimumFractionDigits: number;\n        maximumFractionDigits: number;\n    };\n    getDecimalExpression(): RegExp;\n    getGroupingExpression(): RegExp;\n    getMinusSignExpression(): RegExp;\n    getCurrencyExpression(): RegExp;\n    get filled(): boolean;\n    resetRegex(): void;\n}\nexport declare class InputNumberModule {\n}\n"]}